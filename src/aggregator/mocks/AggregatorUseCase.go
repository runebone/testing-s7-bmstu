// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	dto "aggregator/internal/dto"
	entity "aggregator/internal/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AggregatorUseCase is an autogenerated mock type for the AggregatorUseCase type
type AggregatorUseCase struct {
	mock.Mock
}

// CreateBoard provides a mock function with given fields: ctx, board
func (_m *AggregatorUseCase) CreateBoard(ctx context.Context, board dto.Board) error {
	ret := _m.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for CreateBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Board) error); ok {
		r0 = rf(ctx, board)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCard provides a mock function with given fields: ctx, card
func (_m *AggregatorUseCase) CreateCard(ctx context.Context, card dto.Card) error {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateColumn provides a mock function with given fields: ctx, column
func (_m *AggregatorUseCase) CreateColumn(ctx context.Context, column dto.Column) error {
	ret := _m.Called(ctx, column)

	if len(ret) == 0 {
		panic("no return value specified for CreateColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Column) error); ok {
		r0 = rf(ctx, column)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBoard provides a mock function with given fields: ctx, id
func (_m *AggregatorUseCase) DeleteBoard(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCard provides a mock function with given fields: ctx, id
func (_m *AggregatorUseCase) DeleteCard(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteColumn provides a mock function with given fields: ctx, id
func (_m *AggregatorUseCase) DeleteColumn(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBoards provides a mock function with given fields: ctx, userID
func (_m *AggregatorUseCase) GetBoards(ctx context.Context, userID string) ([]dto.Board, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBoards")
	}

	var r0 []dto.Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dto.Board, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.Board); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCard provides a mock function with given fields: ctx, id
func (_m *AggregatorUseCase) GetCard(ctx context.Context, id string) (*dto.Card, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCard")
	}

	var r0 *dto.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.Card, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.Card); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCards provides a mock function with given fields: ctx, columnID
func (_m *AggregatorUseCase) GetCards(ctx context.Context, columnID string) ([]dto.Card, error) {
	ret := _m.Called(ctx, columnID)

	if len(ret) == 0 {
		panic("no return value specified for GetCards")
	}

	var r0 []dto.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dto.Card, error)); ok {
		return rf(ctx, columnID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.Card); ok {
		r0 = rf(ctx, columnID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, columnID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetColumns provides a mock function with given fields: ctx, boardID
func (_m *AggregatorUseCase) GetColumns(ctx context.Context, boardID string) ([]dto.Column, error) {
	ret := _m.Called(ctx, boardID)

	if len(ret) == 0 {
		panic("no return value specified for GetColumns")
	}

	var r0 []dto.Column
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dto.Column, error)); ok {
		return rf(ctx, boardID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.Column); ok {
		r0 = rf(ctx, boardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Column)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, boardID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStats provides a mock function with given fields: ctx, from, to
func (_m *AggregatorUseCase) GetStats(ctx context.Context, from time.Time, to time.Time) ([]entity.NewUsersAndCardsStats, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 []entity.NewUsersAndCardsStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]entity.NewUsersAndCardsStats, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []entity.NewUsersAndCardsStats); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.NewUsersAndCardsStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *AggregatorUseCase) Login(ctx context.Context, email string, password string) (*dto.Tokens, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.Tokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dto.Tokens, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dto.Tokens); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Tokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, refreshToken
func (_m *AggregatorUseCase) Logout(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, refreshToken
func (_m *AggregatorUseCase) Refresh(ctx context.Context, refreshToken string) (*dto.RefreshResponse, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *dto.RefreshResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.RefreshResponse, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.RefreshResponse); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RefreshResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, username, email, password
func (_m *AggregatorUseCase) Register(ctx context.Context, username string, email string, password string) (*dto.Tokens, error) {
	ret := _m.Called(ctx, username, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *dto.Tokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dto.Tokens, error)); ok {
		return rf(ctx, username, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dto.Tokens); ok {
		r0 = rf(ctx, username, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Tokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBoard provides a mock function with given fields: ctx, board
func (_m *AggregatorUseCase) UpdateBoard(ctx context.Context, board *dto.Board) error {
	ret := _m.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Board) error); ok {
		r0 = rf(ctx, board)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCard provides a mock function with given fields: ctx, card
func (_m *AggregatorUseCase) UpdateCard(ctx context.Context, card *dto.Card) error {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateColumn provides a mock function with given fields: ctx, column
func (_m *AggregatorUseCase) UpdateColumn(ctx context.Context, column *dto.Column) error {
	ret := _m.Called(ctx, column)

	if len(ret) == 0 {
		panic("no return value specified for UpdateColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Column) error); ok {
		r0 = rf(ctx, column)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, token
func (_m *AggregatorUseCase) Validate(ctx context.Context, token string) (*dto.ValidateTokenResponse, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *dto.ValidateTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.ValidateTokenResponse, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.ValidateTokenResponse); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ValidateTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAggregatorUseCase creates a new instance of AggregatorUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggregatorUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggregatorUseCase {
	mock := &AggregatorUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
