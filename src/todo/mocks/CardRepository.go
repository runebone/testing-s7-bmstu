// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "todo/internal/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// CardRepository is an autogenerated mock type for the CardRepository type
type CardRepository struct {
	mock.Mock
}

// CreateCard provides a mock function with given fields: ctx, card
func (_m *CardRepository) CreateCard(ctx context.Context, card *entity.Card) error {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCard provides a mock function with given fields: ctx, id
func (_m *CardRepository) DeleteCard(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCardByID provides a mock function with given fields: ctx, id
func (_m *CardRepository) GetCardByID(ctx context.Context, id uuid.UUID) (*entity.Card, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCardByID")
	}

	var r0 *entity.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Card, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Card); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardsByColumn provides a mock function with given fields: ctx, columnID, limit, offset
func (_m *CardRepository) GetCardsByColumn(ctx context.Context, columnID uuid.UUID, limit int, offset int) ([]entity.Card, error) {
	ret := _m.Called(ctx, columnID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetCardsByColumn")
	}

	var r0 []entity.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]entity.Card, error)); ok {
		return rf(ctx, columnID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []entity.Card); ok {
		r0 = rf(ctx, columnID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, columnID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewCards provides a mock function with given fields: ctx, from, to
func (_m *CardRepository) GetNewCards(ctx context.Context, from time.Time, to time.Time) ([]entity.Card, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetNewCards")
	}

	var r0 []entity.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]entity.Card, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []entity.Card); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveCard provides a mock function with given fields: ctx, card
func (_m *CardRepository) MoveCard(ctx context.Context, card *entity.Card) error {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for MoveCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCard provides a mock function with given fields: ctx, card
func (_m *CardRepository) UpdateCard(ctx context.Context, card *entity.Card) error {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCardRepository creates a new instance of CardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardRepository {
	mock := &CardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
