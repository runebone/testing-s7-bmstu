// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	dto "aggregator/internal/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TodoService is an autogenerated mock type for the TodoService type
type TodoService struct {
	mock.Mock
}

// CreateBoard provides a mock function with given fields: ctx, board
func (_m *TodoService) CreateBoard(ctx context.Context, board dto.Board) error {
	ret := _m.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for CreateBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Board) error); ok {
		r0 = rf(ctx, board)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCard provides a mock function with given fields: ctx, card
func (_m *TodoService) CreateCard(ctx context.Context, card dto.Card) error {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateColumn provides a mock function with given fields: ctx, column
func (_m *TodoService) CreateColumn(ctx context.Context, column dto.Column) error {
	ret := _m.Called(ctx, column)

	if len(ret) == 0 {
		panic("no return value specified for CreateColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Column) error); ok {
		r0 = rf(ctx, column)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBoard provides a mock function with given fields: ctx, id
func (_m *TodoService) DeleteBoard(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCard provides a mock function with given fields: ctx, id
func (_m *TodoService) DeleteCard(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteColumn provides a mock function with given fields: ctx, id
func (_m *TodoService) DeleteColumn(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBoards provides a mock function with given fields: ctx, userID
func (_m *TodoService) GetBoards(ctx context.Context, userID string) ([]dto.Board, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBoards")
	}

	var r0 []dto.Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dto.Board, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.Board); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCard provides a mock function with given fields: ctx, id
func (_m *TodoService) GetCard(ctx context.Context, id string) (*dto.Card, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCard")
	}

	var r0 *dto.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.Card, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.Card); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCards provides a mock function with given fields: ctx, columnID
func (_m *TodoService) GetCards(ctx context.Context, columnID string) ([]dto.Card, error) {
	ret := _m.Called(ctx, columnID)

	if len(ret) == 0 {
		panic("no return value specified for GetCards")
	}

	var r0 []dto.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dto.Card, error)); ok {
		return rf(ctx, columnID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.Card); ok {
		r0 = rf(ctx, columnID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, columnID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetColumns provides a mock function with given fields: ctx, boardID
func (_m *TodoService) GetColumns(ctx context.Context, boardID string) ([]dto.Column, error) {
	ret := _m.Called(ctx, boardID)

	if len(ret) == 0 {
		panic("no return value specified for GetColumns")
	}

	var r0 []dto.Column
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dto.Column, error)); ok {
		return rf(ctx, boardID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.Column); ok {
		r0 = rf(ctx, boardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Column)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, boardID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewCards provides a mock function with given fields: ctx, from, to
func (_m *TodoService) GetNewCards(ctx context.Context, from time.Time, to time.Time) ([]dto.Card, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetNewCards")
	}

	var r0 []dto.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]dto.Card, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []dto.Card); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBoard provides a mock function with given fields: ctx, board
func (_m *TodoService) UpdateBoard(ctx context.Context, board *dto.Board) error {
	ret := _m.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Board) error); ok {
		r0 = rf(ctx, board)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCard provides a mock function with given fields: ctx, card
func (_m *TodoService) UpdateCard(ctx context.Context, card *dto.Card) error {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateColumn provides a mock function with given fields: ctx, column
func (_m *TodoService) UpdateColumn(ctx context.Context, column *dto.Column) error {
	ret := _m.Called(ctx, column)

	if len(ret) == 0 {
		panic("no return value specified for UpdateColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Column) error); ok {
		r0 = rf(ctx, column)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoService creates a new instance of TodoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoService {
	mock := &TodoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
